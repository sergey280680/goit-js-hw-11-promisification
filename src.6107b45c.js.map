{"version":3,"sources":["js/_task-1.js","js/_task-2.js","js/_task-3.js","js/index.js","index.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","users","name","active","toggleUserState","allUsers","userName","updatedUsers","map","user","table","randomIntegerFromInterval","min","max","Math","floor","random","makeTransaction","transaction","reject","id","amount","logSuccess","logError","warn","catch"],"mappings":";;;;;AAEA,MAAMA,EAAQC,GAEL,IAAIC,QAAQC,IACjBC,WAAW,KACTD,EAAQF,IACPA,KAIDI,EAASC,GAAQC,QAAQC,sBAAsBF,OAGrDN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ;;ACdjB,MAAMK,EAAQ,CACZ,CAAEC,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGnBC,EAAkB,CAACC,EAAUC,KAC3BC,MAAAA,EAAeF,EAASG,IAAIC,GAChCA,EAAKP,OAASI,EAAW,IAAKG,EAAMN,QAASM,EAAKN,QAAWM,GAExDhB,OAAAA,QAAQC,QAAQa,IAEnBX,EAASW,GAAgBT,QAAQY,MAAMH,GAE7CH,EAAgBH,EAAO,SAASD,KAAKJ,GACrCQ,EAAgBH,EAAO,OAAOD,KAAKJ;;ACbnC,MAAMe,EAA4B,CAACC,EAAKC,IAC/BC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,GAGhDK,EAAkBC,IAChB3B,MAAAA,EAAQoB,EAA0B,IAAK,KAEtC,OAAA,IAAIlB,QAAQ,CAACC,EAASyB,KAC3BxB,WAAW,KACUmB,KAAKE,SAAW,GAGjCtB,EAAQ,CAAE0B,GAAIF,EAAYE,GAAIvB,KAAMqB,EAAYG,SAEhDF,EAAOD,EAAYE,KAEpB7B,MAID+B,EAAa,EAAGF,GAAAA,EAAIvB,KAAAA,MACxBC,QAAQC,mBAAmBqB,kBAAmBvB,QAG1C0B,EAAWH,IACftB,QAAQ0B,qCAAqCJ,+BAG/CH,EAAgB,CAAEG,GAAI,GAAIC,OAAQ,MAAOrB,KAAKsB,GAAYG,MAAMF,GAEhEN,EAAgB,CAAEG,GAAI,GAAIC,OAAQ,MAAOrB,KAAKsB,GAAYG,MAAMF,GAEhEN,EAAgB,CAAEG,GAAI,GAAIC,OAAQ,KAAMrB,KAAKsB,GAAYG,MAAMF,GAE/DN,EAAgB,CAAEG,GAAI,GAAIC,OAAQ,MAAOrB,KAAKsB,GAAYG,MAAMF;;ACpChE,aAHA,QAAA,WACA,QAAA,aACA,QAAA,aACA,QAAA;;ACFA,aADA,QAAA,oBACA,QAAA","file":"src.6107b45c.js","sourceRoot":"../src","sourcesContent":["// Напиши функцию delay(ms), которая возвращает промис, переходящий в состояние \"resolved\" через ms миллисекунд. Значением исполнившегося промиса должно быть то кол-во миллисекунд которое передали во время вызова функции delay.\n\nconst delay = ms => {\n  // Твой код\n  return new Promise(resolve => {\n    setTimeout(() => {\n      resolve(ms);\n    }, ms);\n  });\n};\n\nconst logger = time => console.log(`Resolved after ${time}ms`);\n\n// Вызовы функции для проверки\ndelay(2000).then(logger); // Resolved after 2000ms\ndelay(3500).then(logger); // Resolved after 1500ms\ndelay(1000).then(logger); // Resolved after 1000ms\n","// Перепиши функцию toggleUserState() так, чтобы она не использовала callback-функцию callback, а принимала всего два параметра allUsers и userName и возвращала промис.\n\nconst users = [\n  { name: 'Mango', active: true },\n  { name: 'Poly', active: false },\n  { name: 'Ajax', active: true },\n  { name: 'Lux', active: false },\n];\n\nconst toggleUserState = (allUsers, userName) => {\n  const updatedUsers = allUsers.map(user =>\n    user.name === userName ? { ...user, active: !user.active } : user,\n  );\n  return Promise.resolve(updatedUsers);\n};\nconst logger = updatedUsers => console.table(updatedUsers);\n\ntoggleUserState(users, 'Mango').then(logger);\ntoggleUserState(users, 'Lux').then(logger);\n","// Перепиши функцию makeTransaction() так, чтобы она\n// не использовала callback - функции onSuccess и onError,\n//   а принимала всего один параметр transaction и\n// возвращала промис.\n\nconst randomIntegerFromInterval = (min, max) => {\n  return Math.floor(Math.random() * (max - min + 1) + min);\n};\n\nconst makeTransaction = transaction => {\n  const delay = randomIntegerFromInterval(200, 500);\n\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const canProcess = Math.random() > 0.3;\n\n      if (canProcess) {\n        resolve({ id: transaction.id, time: transaction.amount });\n      } else {\n        reject(transaction.id);\n      }\n    }, delay);\n  });\n};\n\nconst logSuccess = ({ id, time }) => {\n  console.log(`Transaction ${id} processed in ${time}ms`);\n};\n\nconst logError = id => {\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\n};\n\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\n\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);\n","import './_task';\nimport './_task-1';\nimport './_task-2';\nimport './_task-3';\n","import './sass/main.scss';\nimport './js/index.js'\n"]}